#+TITLE: sem.el

Local semantic indexing and search for Emacs. This is a work in progress as of
now.

* Usage
The example below needs you to have [[https://github.com/lepisma/tokenizers.el][tokenizers.el]] and [[https://github.com/lepisma/onnx.el][onnx.el]] installed as they
are needed by ~sem-embed~.

#+begin_src emacs-lisp
  (require 'sem)
  ;; sem-embed is an optional package providing general purpose local embedding
  ;; functions
  (require 'sem-embed)

  (setq sem-database-dir (expand-file-name "~/.emacs.d/sem/"))
  (setq sem-embed-model-path (expand-file-name "~/.emacs.d/sem/model_O2.onnx"))

  (defun embed-fn (items)
    "The embedding function that takes lisp objects and returns a 2D matrix
  of vectors (n-items x dim)."
    (sem-embed-default (apply #'vector (mapcar #'prin1 items))))

  ;; The output dimension of default embedder from sem-embed is needed here
  (sem-store-new "ml-test" sem-embed-dim)
  (setq sem-store (sem-store-load "ml-test"))

  ;; First we will add a few items to do similarity search
  (let ((items (list "hello world"
                     "this is an introduction"
                     "movies are bad"
                     "food is good")))
    (sem-add-batch sem-store items #'embed-fn))

  ;; #'identity is the read-fn which is used to load back the lisp object from
  ;; their string representation. By default the `sem-add' function uses `prin1'
  ;; for building the strings representation.
  (sem-similar sem-store "worst" 2 #'embed-fn #'identity)
  ;; ((0.33184681863908483 . "movies are bad") (0.25182008665115796 . "hello world"))
  ;; Output is a list of score, item pairs
#+end_src
